Debugger entered--Lisp error: (error "Not connected.")
  signal(error ("Not connected."))
  error("Not connected.")
  (or (slime-auto-connect) (error "Not connected."))
  (cond ((and ... slime-net-processes) (or ... ...)) ((not conn) (or ... ...)) ((not ...) (error "Connection closed.")) (t conn))
  (let ((conn ...)) (cond (... ...) (... ...) (... ...) (t conn)))
  slime-connection()
  slime-dispatch-event((:emacs-rex (swank:interactive-eval "(main)") nil t (lambda (&rest --cl-rest--) (apply ... ... ... --cl-rest--))))
  (let ((--cl-cont-- ...) (--cl-buffer-- ...)) (setf (symbol-value --cl-cont--) cont (symbol-value --cl-buffer--) (current-buffer)) (slime-dispatch-event (list :emacs-rex form ... slime-current-thread ...)))
  (lexical-let ((cont cont) (buffer ...)) (slime-dispatch-event (list :emacs-rex form ... slime-current-thread ...)))
  (slime-rex (cont (buffer ...)) (form) ((:ok value) (slime-eval-with-transcript-cont t value cont buffer)) ((:abort) (slime-eval-with-transcript-cont nil nil nil buffer)))
  slime-eval-with-transcript((swank:interactive-eval "(main)") "(main)")
  (cond ((not current-prefix-arg) (slime-eval-with-transcript ... string)) (t (slime-eval-print string)))
  slime-interactive-eval("(main)")
  (cond ((string-match "^(defvar " form) (slime-re-evaluate-defvar form)) (t (slime-interactive-eval form)))
  (let ((form ...)) (cond (... ...) (t ...)))
  slime-eval-defun()
  call-interactively(slime-eval-defun)
